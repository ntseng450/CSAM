----------------- Options ---------------
                 CUT_mode: CUT                           
               batch_size: 1                             
                    beta1: 0.5                           
                    beta2: 0.999                         
          checkpoints_dir: ./checkpoints                 
           continue_train: False                         
                crop_size: 256                           
                 dataroot: ./datasets/summer2winter_yosemite	[default: placeholder]
             dataset_mode: unaligned                     
                direction: AtoB                          
              display_env: main                          
             display_freq: 400                           
               display_id: 0                             	[default: None]
            display_ncols: 4                             
             display_port: 8097                          
           display_server: http://localhost              
          display_winsize: 256                           
               easy_label: experiment_name               
                    epoch: latest                        
              epoch_count: 1                             
          evaluation_freq: 5000                          
        flip_equivariance: False                         
                 gan_mode: lsgan                         
                  gpu_ids: 0                             
                init_gain: 0.02                          
                init_type: xavier                        
                 input_nc: 3                             
                  isTrain: True                          	[default: None]
               lambda_GAN: 1.0                           
               lambda_NCE: 1.0                           
                load_size: 286                           
                       lr: 0.0002                        
           lr_decay_iters: 50                            
                lr_policy: linear                        
         max_dataset_size: inf                           
                    model: cut                           
                 n_epochs: 500                           	[default: 200]
           n_epochs_decay: 500                           	[default: 200]
               n_layers_D: 3                             
                     name: summer2winter_CUT             	[default: experiment_name]
                    nce_T: 0.07                          
                  nce_idt: True                          
nce_includes_all_negatives_from_minibatch: False                         
               nce_layers: 0,4,8,12,16                   
                      ndf: 64                            
                     netD: basic                         
                     netF: mlp_sample                    
                  netF_nc: 256                           
                     netG: resnet_9blocks                
                      ngf: 64                            
             no_antialias: False                         
          no_antialias_up: False                         
               no_dropout: True                          
                  no_flip: False                         
                  no_html: False                         
                    normD: instance                      
                    normG: instance                      
              num_patches: 256                           
              num_threads: 4                             
                output_nc: 3                             
                    phase: train                         
                pool_size: 0                             
               preprocess: resize_and_crop               
          pretrained_name: None                          
               print_freq: 100                           
         random_scale_max: 3.0                           
             save_by_iter: False                         
          save_epoch_freq: 100                           	[default: 5]
         save_latest_freq: 5000                          
           serial_batches: False                         
stylegan2_G_num_downsampling: 1                             
                   suffix:                               
         update_html_freq: 1000                          
                  verbose: False                         
----------------- End -------------------

torch.Size([1, 128, 128])
torch.Size([128, 128])

0 ReflectionPad2d((3, 3, 3, 3))
1 Conv2d(3, 64, kernel_size=(7, 7), stride=(1, 1))
2 InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
3 ReLU(inplace=True)
4 Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
5 InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
6 ReLU(inplace=True)
7 Downsample(
  (pad): ReflectionPad2d([1, 1, 1, 1])
)
8 Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
9 InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
10 ReLU(inplace=True)
11 Downsample(
  (pad): ReflectionPad2d([1, 1, 1, 1])
)
12 ResnetBlock(
  (conv_block): Sequential(
    (0): ReflectionPad2d((1, 1, 1, 1))
    (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
    (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (3): ReLU(inplace=True)
    (4): ReflectionPad2d((1, 1, 1, 1))
    (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
    (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
  )
)
13 ResnetBlock(
  (conv_block): Sequential(
    (0): ReflectionPad2d((1, 1, 1, 1))
    (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
    (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (3): ReLU(inplace=True)
    (4): ReflectionPad2d((1, 1, 1, 1))
    (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
    (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
  )
)
14 ResnetBlock(
  (conv_block): Sequential(
    (0): ReflectionPad2d((1, 1, 1, 1))
    (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
    (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (3): ReLU(inplace=True)
    (4): ReflectionPad2d((1, 1, 1, 1))
    (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
    (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
  )
)
15 ResnetBlock(
  (conv_block): Sequential(
    (0): ReflectionPad2d((1, 1, 1, 1))
    (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
    (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (3): ReLU(inplace=True)
    (4): ReflectionPad2d((1, 1, 1, 1))
    (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
    (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
  )
)
16 ResnetBlock(
  (conv_block): Sequential(
    (0): ReflectionPad2d((1, 1, 1, 1))
    (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
    (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (3): ReLU(inplace=True)
    (4): ReflectionPad2d((1, 1, 1, 1))
    (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
    (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
  )
)


layer 16 output shape :  torch.Size([1, 256, 64, 64])

tensor([[ 1.4061e-01],
        [ 6.7377e-01],
        [ 6.2243e-01],
        [ 8.3081e-01],
        [ 7.5808e-01],
        [ 9.1851e-01],
        [ 7.5221e-01],
        [ 8.3087e-01],
        [ 7.9192e-01],
        [ 6.2605e-01],
        [ 7.3217e-01],
        [ 8.8424e-01],
        [ 1.4589e-02],
        [ 4.5552e-01],
        [ 4.2041e-01],
        [ 3.2374e-02],
        [ 3.0029e-02],
        [ 3.3135e-02],
        [ 5.8923e-01],
        [ 2.7342e-02],
        [ 9.0643e-02],
        [ 3.8854e-01],
        [ 7.7074e-01],
        [ 5.4530e-01],
        [ 8.0426e-01],
        [ 7.7521e-01],
        [ 7.1872e-01],
        [ 7.5057e-02],
        [ 2.5983e-04],
        [ 6.4093e-01],
        [ 7.5162e-03],
        [ 9.1716e-02],
        [ 7.5056e-01],
        [ 5.4327e-02],
        [ 8.9325e-01],
        [ 3.5700e-01],
        [ 8.4996e-02],
        [ 4.1839e-01],
        [ 4.4619e-01],
        [ 5.8797e-01],
        [-4.1595e-03],
        [ 2.6559e-01],
        [ 9.8862e-01],
        [ 1.7154e-01],
        [ 8.5616e-01],
        [ 2.1850e-01],
        [ 7.2311e-01],
        [ 3.1832e-01],
        [ 6.4457e-01],
        [ 1.3447e-01],
        [ 4.4657e-01],
        [ 1.2178e-01],
        [ 9.3838e-01],
        [ 2.9851e-01],
        [ 5.6365e-01],
        [ 6.9558e-02],
        [ 1.2017e-01],
        [ 5.5954e-01],
        [ 1.2313e-03],
        [ 1.7727e-01],
        [ 1.5015e-01],
        [ 7.8020e-01],
        [ 2.4451e-01],
        [ 3.5671e-01],
        [ 4.9923e-02],
        [ 7.2994e-01],
        [ 3.8804e-01],
        [ 4.1698e-01],
        [ 7.4404e-01],
        [ 6.8500e-01],
        [ 2.3044e-01],
        [ 7.7251e-02],
        [ 8.4697e-01],
        [ 2.6407e-01],
        [ 6.4950e-01],
        [-2.2161e-02],
        [ 9.3915e-01],
        [ 2.9299e-01],
        [ 3.7784e-01],
        [ 1.1699e-01],
        [ 7.2922e-01],
        [ 1.6520e-01],
        [ 6.2786e-01],
        [ 6.0409e-01],
        [ 1.0625e-01],
        [ 6.4575e-01],
        [ 7.2369e-01],
        [ 8.1410e-01],
        [ 6.6081e-02],
        [ 2.0945e-01],
        [ 5.7858e-01],
        [ 8.8213e-01],
        [ 8.6137e-01],
        [ 4.4955e-01],
        [ 7.7809e-01],
        [ 3.7931e-02],
        [ 8.1705e-01],
        [ 6.2157e-01],
        [ 7.2829e-01],
        [ 8.1864e-03]], device='cuda:0', grad_fn=<ViewBackward>)
tensor([[[0.1406, 0.1206, 0.2393,  ..., 0.0911, 0.0774, 0.6350],
         [0.6607, 0.6738, 0.6654,  ..., 0.6750, 0.6557, 0.2118],
         [0.5539, 0.5513, 0.6224,  ..., 0.5290, 0.4985, 0.3909],
         ...,
         [0.6904, 0.6653, 0.7911,  ..., 0.6216, 0.5944, 0.2666],
         [0.8079, 0.7827, 0.8733,  ..., 0.7453, 0.7283, 0.0847],
         [0.9787, 0.9838, 0.9551,  ..., 0.9810, 0.9699, 0.0082]]],
       device='cuda:0', grad_fn=<BmmBackward0>)

       [ 1.4061e-01],
        [ 6.7377e-01],
        [ 6.2243e-01],
        [ 8.3081e-01],

Traceback (most recent call last):
  File "train.py", line 43, in <module>
    model.data_dependent_initialize(data)
  File "C:\Users\ntseng\Documents\ROAHM\CSAM\models\cut_model.py", line 114, in data_dependent_initialize
    self.compute_G_loss().backward()                   # calculate graidents for G
  File "C:\Users\ntseng\Documents\ROAHM\CSAM\models\cut_model.py", line 191, in compute_G_loss
    self.loss_NCE = self.calculate_NCE_loss(self.real_A, self.fake_B)
  File "C:\Users\ntseng\Documents\ROAHM\CSAM\models\cut_model.py", line 228, in calculate_NCE_loss
    loss = crit(f_q, f_k, f_a) * self.opt.lambda_NCE
  File "D:\Anaconda3\envs\pytorch\lib\site-packages\torch\nn\modules\module.py", line 722, in _call_impl
    result = self.forward(*input, **kwargs)
  File "C:\Users\ntseng\Documents\ROAHM\CSAM\models\patchnce.py", line 62, in forward
    loss = self.cross_entropy_loss(l_neg, torch.arange(npatches, dtype=torch.long, device=feat_q.device))
  File "D:\Anaconda3\envs\pytorch\lib\site-packages\torch\nn\modules\module.py", line 722, in _call_impl
    result = self.forward(*input, **kwargs)
  File "D:\Anaconda3\envs\pytorch\lib\site-packages\torch\nn\modules\loss.py", line 948, in forward
    ignore_index=self.ignore_index, reduction=self.reduction)
  File "D:\Anaconda3\envs\pytorch\lib\site-packages\torch\nn\functional.py", line 2422, in cross_entropy
    return nll_loss(log_softmax(input, 1), target, weight, None, ignore_index, None, reduction)
  File "D:\Anaconda3\envs\pytorch\lib\site-packages\torch\nn\functional.py", line 2218, in nll_loss
    ret = torch._C._nn.nll_loss(input, target, weight, _Reduction.get_enum(reduction), ignore_index)
RuntimeError: the derivative for 'weight' is not implemented