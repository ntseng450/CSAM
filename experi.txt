----------------- Options ---------------
                 CUT_mode: CUT                           
               batch_size: 1                             
                    beta1: 0.5                           
                    beta2: 0.999                         
          checkpoints_dir: ./checkpoints                 
           continue_train: False                         
                crop_size: 256                           
                 dataroot: ./datasets/summer2winter_yosemite	[default: placeholder]
             dataset_mode: unaligned                     
                direction: AtoB                          
              display_env: main                          
             display_freq: 400                           
               display_id: 0                             	[default: None]
            display_ncols: 4                             
             display_port: 8097                          
           display_server: http://localhost              
          display_winsize: 256                           
               easy_label: experiment_name               
                    epoch: latest                        
              epoch_count: 1                             
          evaluation_freq: 5000                          
        flip_equivariance: False                         
                 gan_mode: lsgan                         
                  gpu_ids: 0                             
                init_gain: 0.02                          
                init_type: xavier                        
                 input_nc: 3                             
                  isTrain: True                          	[default: None]
               lambda_GAN: 1.0                           
               lambda_NCE: 1.0                           
                load_size: 286                           
                       lr: 0.0002                        
           lr_decay_iters: 50                            
                lr_policy: linear                        
         max_dataset_size: inf                           
                    model: cut                           
                 n_epochs: 500                           	[default: 200]
           n_epochs_decay: 500                           	[default: 200]
               n_layers_D: 3                             
                     name: summer2winter_CUT             	[default: experiment_name]
                    nce_T: 0.07                          
                  nce_idt: True                          
nce_includes_all_negatives_from_minibatch: False                         
               nce_layers: 0,4,8,12,16                   
                      ndf: 64                            
                     netD: basic                         
                     netF: mlp_sample                    
                  netF_nc: 256                           
                     netG: resnet_9blocks                
                      ngf: 64                            
             no_antialias: False                         
          no_antialias_up: False                         
               no_dropout: True                          
                  no_flip: False                         
                  no_html: False                         
                    normD: instance                      
                    normG: instance                      
              num_patches: 256                           
              num_threads: 4                             
                output_nc: 3                             
                    phase: train                         
                pool_size: 0                             
               preprocess: resize_and_crop               
          pretrained_name: None                          
               print_freq: 100                           
         random_scale_max: 3.0                           
             save_by_iter: False                         
          save_epoch_freq: 100                           	[default: 5]
         save_latest_freq: 5000                          
           serial_batches: False                         
stylegan2_G_num_downsampling: 1                             
                   suffix:                               
         update_html_freq: 1000                          
                  verbose: False                         
----------------- End -------------------

torch.Size([1, 128, 128])
torch.Size([128, 128])

0 ReflectionPad2d((3, 3, 3, 3))
1 Conv2d(3, 64, kernel_size=(7, 7), stride=(1, 1))
2 InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
3 ReLU(inplace=True)
4 Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
5 InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
6 ReLU(inplace=True)
7 Downsample(
  (pad): ReflectionPad2d([1, 1, 1, 1])
)
8 Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
9 InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
10 ReLU(inplace=True)
11 Downsample(
  (pad): ReflectionPad2d([1, 1, 1, 1])
)
12 ResnetBlock(
  (conv_block): Sequential(
    (0): ReflectionPad2d((1, 1, 1, 1))
    (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
    (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (3): ReLU(inplace=True)
    (4): ReflectionPad2d((1, 1, 1, 1))
    (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
    (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
  )
)
13 ResnetBlock(
  (conv_block): Sequential(
    (0): ReflectionPad2d((1, 1, 1, 1))
    (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
    (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (3): ReLU(inplace=True)
    (4): ReflectionPad2d((1, 1, 1, 1))
    (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
    (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
  )
)
14 ResnetBlock(
  (conv_block): Sequential(
    (0): ReflectionPad2d((1, 1, 1, 1))
    (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
    (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (3): ReLU(inplace=True)
    (4): ReflectionPad2d((1, 1, 1, 1))
    (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
    (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
  )
)
15 ResnetBlock(
  (conv_block): Sequential(
    (0): ReflectionPad2d((1, 1, 1, 1))
    (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
    (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (3): ReLU(inplace=True)
    (4): ReflectionPad2d((1, 1, 1, 1))
    (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
    (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
  )
)
16 ResnetBlock(
  (conv_block): Sequential(
    (0): ReflectionPad2d((1, 1, 1, 1))
    (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
    (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (3): ReLU(inplace=True)
    (4): ReflectionPad2d((1, 1, 1, 1))
    (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
    (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
  )
)


layer 16 output shape :  torch.Size([1, 256, 64, 64])

id: 0 shape: torch.Size([1, 262, 262])
id: 1 shape: torch.Size([1, 256, 256])
id: 2 shape: torch.Size([1, 128, 128])
id: 3 shape: torch.Size([1, 64, 64])
id: 4 shape: torch.Size([1, 64, 64])
tensor(14.9509, device='cuda:0')
tensor(37.5340, device='cuda:0')
id: 0 shape: torch.Size([1, 262, 262])
id: 1 shape: torch.Size([1, 256, 256])
id: 2 shape: torch.Size([1, 128, 128])
id: 3 shape: torch.Size([1, 64, 64])
id: 4 shape: torch.Size([1, 64, 64])
tensor(14.8341, device='cuda:0')
tensor(54.8426, device='cuda:0')
id: 0 shape: torch.Size([1, 262, 262])
id: 1 shape: torch.Size([1, 256, 256])
id: 2 shape: torch.Size([1, 128, 128])
id: 3 shape: torch.Size([1, 64, 64])
id: 4 shape: torch.Size([1, 64, 64])
tensor(15.7399, device='cuda:0')
tensor(62.6134, device='cuda:0')
id: 0 shape: torch.Size([1, 262, 262])
id: 1 shape: torch.Size([1, 256, 256])
id: 2 shape: torch.Size([1, 128, 128])
id: 3 shape: torch.Size([1, 64, 64])
id: 4 shape: torch.Size([1, 64, 64])
tensor(13.6671, device='cuda:0')
tensor(28.5576, device='cuda:0')


create web directory ./checkpoints\summer2winter_CUT\web...
id: 0 tensor([[[0.0913, 0.0913, 0.0913,  ..., 0.1844, 0.1871, 0.1871],
         [0.0878, 0.0878, 0.0925,  ..., 0.1939, 0.1899, 0.1947],
         [0.0904, 0.0904, 0.0904,  ..., 0.1905, 0.1885, 0.1912],
         ...,
         [0.5808, 0.5455, 0.5689,  ..., 0.7925, 0.8349, 0.8207],
         [0.4392, 0.4086, 0.5038,  ..., 0.7925, 0.8349, 0.8207],
         [0.4603, 0.4221, 0.4710,  ..., 0.7925, 0.8207, 0.8207]]],
       device='cuda:0')
id: 1 tensor([[[11.1217, 25.4297, 25.4610,  ..., 30.0600, 30.1186, 13.5978],
         [24.2989, 55.6279, 55.6825,  ..., 67.2776, 67.4130, 30.4962],
         [24.0217, 54.9649, 54.9877,  ..., 67.6690, 67.8062, 30.6810],
         ...,
         [ 9.7032, 21.2570, 21.5635,  ..., 36.0053, 35.8362, 16.1811],
         [ 9.2725, 20.4346, 20.9914,  ..., 36.3667, 36.1881, 16.3477],
         [ 4.1772,  9.2487,  9.5569,  ..., 17.2051, 17.1130,  7.7390]]],
       device='cuda:0')
id: 2 tensor([[[ 4.4040, 10.6796, 12.9082,  ..., 15.9460, 14.5200,  6.3098],
         [ 9.0073, 21.7083, 25.6280,  ..., 33.0289, 30.1072, 12.5488],
         [ 9.0310, 21.8516, 26.1925,  ..., 37.0041, 33.5502, 13.9281],
         ...,
         [ 7.0344, 15.5116, 16.4739,  ..., 34.1972, 32.3437, 14.4412],
         [ 7.3848, 16.2338, 17.2529,  ..., 33.2462, 31.7512, 14.2245],
         [ 3.9083,  8.3608,  9.2665,  ..., 16.8041, 16.0083,  7.6881]]],
       device='cuda:0')
id: 3 tensor([[[1.1282, 0.9935, 1.0687,  ..., 1.3354, 1.2851, 1.3718],
         [0.8213, 0.7965, 0.7824,  ..., 1.1839, 1.1578, 1.1436],
         [0.8349, 0.8174, 0.8043,  ..., 1.1994, 1.1255, 1.0966],
         ...,
         [0.4087, 0.3594, 0.5414,  ..., 1.2558, 1.2034, 1.1920],
         [0.3720, 0.3762, 0.5512,  ..., 1.1957, 1.1499, 1.1311],
         [0.6512, 0.5949, 0.8147,  ..., 1.3810, 1.3350, 1.4140]]],
       device='cuda:0')
id: 4 tensor([[[1.3126, 1.1420, 1.2673,  ..., 1.1389, 1.1113, 1.2225],
         [0.8286, 0.7994, 0.8116,  ..., 0.8481, 0.8498, 0.8608],
         [0.8753, 0.8534, 0.8426,  ..., 0.8308, 0.8235, 0.8258],
         ...,
         [1.0042, 0.8262, 0.9514,  ..., 0.9639, 0.9439, 0.9463],
         [1.0114, 0.8588, 0.8824,  ..., 1.0005, 0.9858, 0.9790],
         [1.5481, 1.2554, 1.3353,  ..., 1.2136, 1.1890, 1.2831]]],
       device='cuda:0')
tensor(14.1575, device='cuda:0')
tensor(49.0071, device='cuda:0')
id: 0 tensor([[[0.3804, 0.3854, 0.3854,  ..., 0.2049, 0.2118, 0.2183],
         [0.3904, 0.3904, 0.3830,  ..., 0.2150, 0.2170, 0.2205],
         [0.4084, 0.4084, 0.3956,  ..., 0.2310, 0.2384, 0.2306],
         ...,
         [0.0887, 0.0713, 0.0571,  ..., 0.0627, 0.1428, 0.2254],
         [0.1083, 0.0985, 0.0831,  ..., 0.0087, 0.0836, 0.1506],
         [0.0890, 0.0890, 0.0877,  ..., 0.0271, 0.0658, 0.0993]]],
       device='cuda:0')
id: 1 tensor([[[10.3376, 22.8504, 22.8486,  ..., 10.6615, 10.6169,  4.8498],
         [22.7541, 50.2262, 50.1790,  ..., 23.6644, 23.5638, 10.7693],
         [22.8202, 50.3391, 50.2272,  ..., 23.9602, 23.9389, 10.9907],
         ...,
         [ 9.5495, 21.8142, 21.8185,  ..., 24.6079, 24.5505, 11.1988],
         [ 9.6143, 21.9905, 22.0192,  ..., 23.9444, 23.8032, 10.8497],
         [ 4.4584, 10.1934, 10.2058,  ..., 10.7949, 10.7077,  4.8845]]],
       device='cuda:0')
id: 2 tensor([[[14.2826, 32.2022, 35.3056,  ..., 13.1665, 13.3957,  5.9114],
         [28.3488, 64.8559, 71.4572,  ..., 24.7941, 25.1594, 10.8027],
         [30.6753, 70.2128, 77.9902,  ..., 24.4354, 24.8190, 10.6547],
         ...,
         [ 8.9031, 20.7088, 20.9550,  ..., 17.2307, 17.3962,  7.7067],
         [ 9.3353, 21.5721, 21.9418,  ..., 18.3645, 18.6394,  8.1342],
         [ 5.9939, 13.3901, 13.7527,  ..., 11.4409, 11.3602,  5.3809]]],
       device='cuda:0')
id: 3 tensor([[[0.9552, 0.9277, 0.9858,  ..., 0.7168, 0.9071, 1.1133],
         [0.7619, 0.9898, 1.0500,  ..., 0.5340, 0.6906, 0.7581],
         [0.8009, 0.9963, 1.0604,  ..., 0.4621, 0.5266, 0.5709],
         ...,
         [0.4859, 0.4771, 0.5899,  ..., 0.5257, 0.5051, 0.5699],
         [0.4266, 0.4340, 0.5190,  ..., 0.5001, 0.4797, 0.5214],
         [0.6919, 0.5597, 0.6800,  ..., 0.7135, 0.6754, 0.8075]]],
       device='cuda:0')
id: 4 tensor([[[1.5541, 1.4183, 1.4822,  ..., 1.1042, 1.1968, 1.4985],
         [1.0124, 1.1970, 1.2717,  ..., 0.8481, 1.0090, 1.1423],
         [0.9444, 1.0412, 1.0916,  ..., 0.8910, 1.0014, 1.1429],
         ...,
         [0.6322, 0.5672, 0.6385,  ..., 0.5369, 0.5196, 0.5813],
         [0.6108, 0.5640, 0.6167,  ..., 0.5230, 0.5034, 0.5411],
         [1.0268, 0.8064, 0.8854,  ..., 0.8619, 0.8338, 0.9783]]],
       device='cuda:0')